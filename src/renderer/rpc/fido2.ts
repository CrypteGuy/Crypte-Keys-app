// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: aa996c74cbb5c83410129cfdd9bb79581cc4bcea
import {ipcRenderer} from 'electron'
import {randomBytes} from 'crypto'

import {
  DevicesRequest,
  DevicesResponse,
  DeviceInfoRequest,
  DeviceInfoResponse,
  MakeCredentialRequest,
  MakeCredentialResponse,
  SetPINRequest,
  SetPINResponse,
  ResetRequest,
  ResetResponse,
  RetryCountRequest,
  RetryCountResponse,
  AssertionRequest,
  AssertionResponse,
  CredentialsInfoRequest,
  CredentialsInfoResponse,
  CredentialsRequest,
  CredentialsResponse,
  RelyingPartiesRequest,
  RelyingPartiesResponse
} from './fido2.d'

export interface RPCError {
    code?: number;
    message?: string;
    details?: string;
}

const replyID = (): string => {
  return randomBytes(20).toString('hex')
}

export type ErrHandler = (err: RPCError) => void
var errHandler: ErrHandler = (err: RPCError) => {}
export const setErrHandler = (eh: ErrHandler) => {
  errHandler = eh
}

export const devices = (
  req: DevicesRequest,
  cb: (err: RPCError, resp: DevicesResponse) => void
) => {
  const reply = 'Authenticators.devices-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.devices):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.devices) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.devices)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'devices', args: req, reply: reply})
}

export const deviceInfo = (
  req: DeviceInfoRequest,
  cb: (err: RPCError, resp: DeviceInfoResponse) => void
) => {
  const reply = 'Authenticators.deviceInfo-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.deviceInfo):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.deviceInfo) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.deviceInfo)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'deviceInfo', args: req, reply: reply})
}

export const makeCredential = (
  req: MakeCredentialRequest,
  cb: (err: RPCError, resp: MakeCredentialResponse) => void
) => {
  const reply = 'Authenticators.makeCredential-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.makeCredential):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.makeCredential) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.makeCredential)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'makeCredential', args: req, reply: reply})
}

export const setPIN = (
  req: SetPINRequest,
  cb: (err: RPCError, resp: SetPINResponse) => void
) => {
  const reply = 'Authenticators.setPIN-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.setPIN):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.setPIN) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.setPIN)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'setPIN', args: req, reply: reply})
}

export const reset = (
  req: ResetRequest,
  cb: (err: RPCError, resp: ResetResponse) => void
) => {
  const reply = 'Authenticators.reset-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.reset):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.reset) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.reset)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'reset', args: req, reply: reply})
}

export const retryCount = (
  req: RetryCountRequest,
  cb: (err: RPCError, resp: RetryCountResponse) => void
) => {
  const reply = 'Authenticators.retryCount-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.retryCount):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.retryCount) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.retryCount)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'retryCount', args: req, reply: reply})
}

export const assertion = (
  req: AssertionRequest,
  cb: (err: RPCError, resp: AssertionResponse) => void
) => {
  const reply = 'Authenticators.assertion-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.assertion):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.assertion) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.assertion)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'assertion', args: req, reply: reply})
}

export const credentialsInfo = (
  req: CredentialsInfoRequest,
  cb: (err: RPCError, resp: CredentialsInfoResponse) => void
) => {
  const reply = 'Authenticators.credentialsInfo-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.credentialsInfo):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.credentialsInfo) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.credentialsInfo)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'credentialsInfo', args: req, reply: reply})
}

export const credentials = (
  req: CredentialsRequest,
  cb: (err: RPCError, resp: CredentialsResponse) => void
) => {
  const reply = 'Authenticators.credentials-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.credentials):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.credentials) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.credentials)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'credentials', args: req, reply: reply})
}

export const relyingParties = (
  req: RelyingPartiesRequest,
  cb: (err: RPCError, resp: RelyingPartiesResponse) => void
) => {
  const reply = 'Authenticators.relyingParties-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Authenticators.relyingParties):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Authenticators.relyingParties) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Authenticators.relyingParties)...')
  ipcRenderer.send('rpc', {service: 'Authenticators', method: 'relyingParties', args: req, reply: reply})
}

