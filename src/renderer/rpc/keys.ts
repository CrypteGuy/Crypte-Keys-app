// Code generated by protoc-gen-tsrpc DO NOT EDIT.
// InputID: 93fef1e779849a79ec031a351f59c0d39b35a0ce
import {ipcRenderer} from 'electron'
import {randomBytes} from 'crypto'

import {
  KeyGenerateRequest,
  KeyGenerateResponse,
  KeysRequest,
  KeysResponse,
  KeyRequest,
  KeyResponse,
  KeyImportRequest,
  KeyImportResponse,
  KeyExportRequest,
  KeyExportResponse,
  KeyRemoveRequest,
  KeyRemoveResponse,
  SignRequest,
  SignResponse,
  SignFileInput,
  SignFileOutput,
  SignInput,
  SignOutput,
  VerifyRequest,
  VerifyResponse,
  VerifyFileInput,
  VerifyFileOutput,
  VerifyInput,
  VerifyOutput,
  VerifyDetachedRequest,
  VerifyDetachedResponse,
  VerifyDetachedFileInput,
  VerifyDetachedInput,
  EncryptRequest,
  EncryptResponse,
  EncryptInput,
  EncryptOutput,
  EncryptFileInput,
  EncryptFileOutput,
  DecryptRequest,
  DecryptResponse,
  DecryptFileInput,
  DecryptFileOutput,
  DecryptInput,
  DecryptOutput,
  SigchainRequest,
  SigchainResponse,
  StatementRequest,
  StatementResponse,
  StatementCreateRequest,
  StatementCreateResponse,
  StatementRevokeRequest,
  StatementRevokeResponse,
  UserRequest,
  UserResponse,
  UserSearchRequest,
  UserSearchResponse,
  UserServiceRequest,
  UserServiceResponse,
  UserSignRequest,
  UserSignResponse,
  UserAddRequest,
  UserAddResponse,
  SearchRequest,
  SearchResponse,
  SecretRequest,
  SecretResponse,
  SecretSaveRequest,
  SecretSaveResponse,
  SecretRemoveRequest,
  SecretRemoveResponse,
  SecretsRequest,
  SecretsResponse,
  ItemRequest,
  ItemResponse,
  ItemsRequest,
  ItemsResponse,
  PullRequest,
  PullResponse,
  PushRequest,
  PushResponse,
  ConfigRequest,
  ConfigResponse,
  ConfigSetRequest,
  ConfigSetResponse,
  WormholeInput,
  WormholeOutput,
  AuthSetupRequest,
  AuthSetupResponse,
  AuthUnlockRequest,
  AuthUnlockResponse,
  AuthLockRequest,
  AuthLockResponse,
  RuntimeStatusRequest,
  RuntimeStatusResponse,
  RandRequest,
  RandResponse,
  RandPasswordRequest,
  RandPasswordResponse,
  CollectionsRequest,
  CollectionsResponse,
  DocumentsRequest,
  DocumentsResponse,
  DocumentDeleteRequest,
  DocumentDeleteResponse,
  MessagePrepareRequest,
  MessagePrepareResponse,
  MessageCreateRequest,
  MessageCreateResponse,
  MessagesRequest,
  MessagesResponse,
  WatchRequest,
  WatchEvent
} from './keys.d'

export interface RPCError {
    code?: number;
    message?: string;
    details?: string;
}

const replyID = (): string => {
  return randomBytes(20).toString('hex')
}

export type ErrHandler = (err: RPCError) => void
var errHandler: ErrHandler = (err: RPCError) => {}
export const setErrHandler = (eh: ErrHandler) => {
  errHandler = eh
}

export const keyGenerate = (
  req: KeyGenerateRequest,
  cb: (err: RPCError, resp: KeyGenerateResponse) => void
) => {
  const reply = 'Keys.keyGenerate-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.keyGenerate):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.keyGenerate) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.keyGenerate)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'keyGenerate', args: req, reply: reply})
}

export const keys = (
  req: KeysRequest,
  cb: (err: RPCError, resp: KeysResponse) => void
) => {
  const reply = 'Keys.keys-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.keys):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.keys) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.keys)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'keys', args: req, reply: reply})
}

export const key = (
  req: KeyRequest,
  cb: (err: RPCError, resp: KeyResponse) => void
) => {
  const reply = 'Keys.key-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.key):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.key) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.key)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'key', args: req, reply: reply})
}

export const keyImport = (
  req: KeyImportRequest,
  cb: (err: RPCError, resp: KeyImportResponse) => void
) => {
  const reply = 'Keys.keyImport-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.keyImport):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.keyImport) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.keyImport)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'keyImport', args: req, reply: reply})
}

export const keyExport = (
  req: KeyExportRequest,
  cb: (err: RPCError, resp: KeyExportResponse) => void
) => {
  const reply = 'Keys.keyExport-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.keyExport):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.keyExport) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.keyExport)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'keyExport', args: req, reply: reply})
}

export const keyRemove = (
  req: KeyRemoveRequest,
  cb: (err: RPCError, resp: KeyRemoveResponse) => void
) => {
  const reply = 'Keys.keyRemove-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.keyRemove):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.keyRemove) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.keyRemove)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'keyRemove', args: req, reply: reply})
}

export const sign = (
  req: SignRequest,
  cb: (err: RPCError, resp: SignResponse) => void
) => {
  const reply = 'Keys.sign-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.sign):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.sign) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.sign)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'sign', args: req, reply: reply})
}

export const signFile = (
  f: (err: RPCError, resp: SignFileOutput, done: boolean) => void
): ((req: SignFileInput, end: boolean) => void) => {
  const reply = 'Keys.signFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.signFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.signFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.signFile)...')
  return (req: SignFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'signFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const signStream = (
  f: (err: RPCError, resp: SignOutput, done: boolean) => void
): ((req: SignInput, end: boolean) => void) => {
  const reply = 'Keys.signStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.signStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.signStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.signStream)...')
  return (req: SignInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'signStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verify = (
  req: VerifyRequest,
  cb: (err: RPCError, resp: VerifyResponse) => void
) => {
  const reply = 'Keys.verify-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.verify):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.verify) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.verify)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'verify', args: req, reply: reply})
}

export const verifyFile = (
  f: (err: RPCError, resp: VerifyFileOutput, done: boolean) => void
): ((req: VerifyFileInput, end: boolean) => void) => {
  const reply = 'Keys.verifyFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.verifyFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.verifyFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.verifyFile)...')
  return (req: VerifyFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'verifyFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verifyStream = (
  f: (err: RPCError, resp: VerifyOutput, done: boolean) => void
): ((req: VerifyInput, end: boolean) => void) => {
  const reply = 'Keys.verifyStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.verifyStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.verifyStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.verifyStream)...')
  return (req: VerifyInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'verifyStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verifyArmoredStream = (
  f: (err: RPCError, resp: VerifyOutput, done: boolean) => void
): ((req: VerifyInput, end: boolean) => void) => {
  const reply = 'Keys.verifyArmoredStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.verifyArmoredStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.verifyArmoredStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.verifyArmoredStream)...')
  return (req: VerifyInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'verifyArmoredStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const verifyDetached = (
  req: VerifyDetachedRequest,
  cb: (err: RPCError, resp: VerifyDetachedResponse) => void
) => {
  const reply = 'Keys.verifyDetached-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.verifyDetached):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.verifyDetached) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.verifyDetached)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'verifyDetached', args: req, reply: reply})
}

export const verifyDetachedFile = (
  req: VerifyDetachedFileInput,
  cb: (err: RPCError, resp: VerifyDetachedResponse) => void
) => {
  const reply = 'Keys.verifyDetachedFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.verifyDetachedFile):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.verifyDetachedFile) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.verifyDetachedFile)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'verifyDetachedFile', args: req, reply: reply})
}

export const verifyDetachedStream = (
  req: VerifyDetachedInput,
  cb: (err: RPCError, resp: VerifyDetachedResponse) => void
) => {
  const reply = 'Keys.verifyDetachedStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.verifyDetachedStream):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.verifyDetachedStream) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.verifyDetachedStream)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'verifyDetachedStream', args: req, reply: reply})
}

export const encrypt = (
  req: EncryptRequest,
  cb: (err: RPCError, resp: EncryptResponse) => void
) => {
  const reply = 'Keys.encrypt-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.encrypt):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.encrypt) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.encrypt)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'encrypt', args: req, reply: reply})
}

export const encryptStream = (
  f: (err: RPCError, resp: EncryptOutput, done: boolean) => void
): ((req: EncryptInput, end: boolean) => void) => {
  const reply = 'Keys.encryptStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.encryptStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.encryptStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.encryptStream)...')
  return (req: EncryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'encryptStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const encryptFile = (
  f: (err: RPCError, resp: EncryptFileOutput, done: boolean) => void
): ((req: EncryptFileInput, end: boolean) => void) => {
  const reply = 'Keys.encryptFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.encryptFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.encryptFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.encryptFile)...')
  return (req: EncryptFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'encryptFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const decrypt = (
  req: DecryptRequest,
  cb: (err: RPCError, resp: DecryptResponse) => void
) => {
  const reply = 'Keys.decrypt-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.decrypt):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.decrypt) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.decrypt)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'decrypt', args: req, reply: reply})
}

export const decryptFile = (
  f: (err: RPCError, resp: DecryptFileOutput, done: boolean) => void
): ((req: DecryptFileInput, end: boolean) => void) => {
  const reply = 'Keys.decryptFile-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.decryptFile):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.decryptFile) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.decryptFile)...')
  return (req: DecryptFileInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'decryptFile', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const decryptStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.decryptStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.decryptStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.decryptStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.decryptStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'decryptStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const decryptArmoredStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.decryptArmoredStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.decryptArmoredStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.decryptArmoredStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.decryptArmoredStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'decryptArmoredStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const signcryptOpenStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.signcryptOpenStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.signcryptOpenStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.signcryptOpenStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.signcryptOpenStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'signcryptOpenStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const signcryptOpenArmoredStream = (
  f: (err: RPCError, resp: DecryptOutput, done: boolean) => void
): ((req: DecryptInput, end: boolean) => void) => {
  const reply = 'Keys.signcryptOpenArmoredStream-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.signcryptOpenArmoredStream):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.signcryptOpenArmoredStream) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.signcryptOpenArmoredStream)...')
  return (req: DecryptInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'signcryptOpenArmoredStream', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const sigchain = (
  req: SigchainRequest,
  cb: (err: RPCError, resp: SigchainResponse) => void
) => {
  const reply = 'Keys.sigchain-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.sigchain):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.sigchain) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.sigchain)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'sigchain', args: req, reply: reply})
}

export const statement = (
  req: StatementRequest,
  cb: (err: RPCError, resp: StatementResponse) => void
) => {
  const reply = 'Keys.statement-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.statement):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.statement) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.statement)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'statement', args: req, reply: reply})
}

export const statementCreate = (
  req: StatementCreateRequest,
  cb: (err: RPCError, resp: StatementCreateResponse) => void
) => {
  const reply = 'Keys.statementCreate-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.statementCreate):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.statementCreate) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.statementCreate)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'statementCreate', args: req, reply: reply})
}

export const statementRevoke = (
  req: StatementRevokeRequest,
  cb: (err: RPCError, resp: StatementRevokeResponse) => void
) => {
  const reply = 'Keys.statementRevoke-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.statementRevoke):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.statementRevoke) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.statementRevoke)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'statementRevoke', args: req, reply: reply})
}

export const user = (
  req: UserRequest,
  cb: (err: RPCError, resp: UserResponse) => void
) => {
  const reply = 'Keys.user-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.user):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.user) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.user)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'user', args: req, reply: reply})
}

export const userSearch = (
  req: UserSearchRequest,
  cb: (err: RPCError, resp: UserSearchResponse) => void
) => {
  const reply = 'Keys.userSearch-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.userSearch):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.userSearch) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.userSearch)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'userSearch', args: req, reply: reply})
}

export const userService = (
  req: UserServiceRequest,
  cb: (err: RPCError, resp: UserServiceResponse) => void
) => {
  const reply = 'Keys.userService-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.userService):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.userService) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.userService)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'userService', args: req, reply: reply})
}

export const userSign = (
  req: UserSignRequest,
  cb: (err: RPCError, resp: UserSignResponse) => void
) => {
  const reply = 'Keys.userSign-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.userSign):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.userSign) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.userSign)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'userSign', args: req, reply: reply})
}

export const userAdd = (
  req: UserAddRequest,
  cb: (err: RPCError, resp: UserAddResponse) => void
) => {
  const reply = 'Keys.userAdd-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.userAdd):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.userAdd) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.userAdd)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'userAdd', args: req, reply: reply})
}

export const search = (
  req: SearchRequest,
  cb: (err: RPCError, resp: SearchResponse) => void
) => {
  const reply = 'Keys.search-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.search):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.search) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.search)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'search', args: req, reply: reply})
}

export const secret = (
  req: SecretRequest,
  cb: (err: RPCError, resp: SecretResponse) => void
) => {
  const reply = 'Keys.secret-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.secret):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.secret) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.secret)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'secret', args: req, reply: reply})
}

export const secretSave = (
  req: SecretSaveRequest,
  cb: (err: RPCError, resp: SecretSaveResponse) => void
) => {
  const reply = 'Keys.secretSave-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.secretSave):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.secretSave) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.secretSave)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'secretSave', args: req, reply: reply})
}

export const secretRemove = (
  req: SecretRemoveRequest,
  cb: (err: RPCError, resp: SecretRemoveResponse) => void
) => {
  const reply = 'Keys.secretRemove-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.secretRemove):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.secretRemove) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.secretRemove)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'secretRemove', args: req, reply: reply})
}

export const secrets = (
  req: SecretsRequest,
  cb: (err: RPCError, resp: SecretsResponse) => void
) => {
  const reply = 'Keys.secrets-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.secrets):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.secrets) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.secrets)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'secrets', args: req, reply: reply})
}

export const item = (
  req: ItemRequest,
  cb: (err: RPCError, resp: ItemResponse) => void
) => {
  const reply = 'Keys.item-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.item):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.item) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.item)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'item', args: req, reply: reply})
}

export const items = (
  req: ItemsRequest,
  cb: (err: RPCError, resp: ItemsResponse) => void
) => {
  const reply = 'Keys.items-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.items):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.items) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.items)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'items', args: req, reply: reply})
}

export const pull = (
  req: PullRequest,
  cb: (err: RPCError, resp: PullResponse) => void
) => {
  const reply = 'Keys.pull-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.pull):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.pull) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.pull)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'pull', args: req, reply: reply})
}

export const push = (
  req: PushRequest,
  cb: (err: RPCError, resp: PushResponse) => void
) => {
  const reply = 'Keys.push-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.push):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.push) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.push)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'push', args: req, reply: reply})
}

export const config = (
  req: ConfigRequest,
  cb: (err: RPCError, resp: ConfigResponse) => void
) => {
  const reply = 'Keys.config-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.config):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.config) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.config)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'config', args: req, reply: reply})
}

export const configSet = (
  req: ConfigSetRequest,
  cb: (err: RPCError, resp: ConfigSetResponse) => void
) => {
  const reply = 'Keys.configSet-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.configSet):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.configSet) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.configSet)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'configSet', args: req, reply: reply})
}

export const wormhole = (
  f: (err: RPCError, resp: WormholeOutput, done: boolean) => void
): ((req: WormholeInput, end: boolean) => void) => {
  const reply = 'Keys.wormhole-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    if (!!arg.done || arg.err) {
      ipcRenderer.removeAllListeners(reply)
	}
	if (arg.err) {
	  console.error('RPC-stream error (Keys.wormhole):', arg.err)
      errHandler(arg.err)
    }
    if (!!arg.done) {
      console.log('RPC-stream (Keys.wormhole) done')
    }
    f(arg.err, arg.resp, !!arg.done)
  })
  console.log('RPC-stream (Keys.wormhole)...')
  return (req: WormholeInput, end: boolean) => {
    ipcRenderer.send('rpc-stream', {service: 'Keys', method: 'wormhole', args: req, reply: reply, end: end})
    if (end) {
      ipcRenderer.removeAllListeners(reply)
    }
  }
}

export const authSetup = (
  req: AuthSetupRequest,
  cb: (err: RPCError, resp: AuthSetupResponse) => void
) => {
  const reply = 'Keys.authSetup-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.authSetup):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.authSetup) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.authSetup)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'authSetup', args: req, reply: reply})
}

export const authUnlock = (
  req: AuthUnlockRequest,
  cb: (err: RPCError, resp: AuthUnlockResponse) => void
) => {
  const reply = 'Keys.authUnlock-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.authUnlock):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.authUnlock) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.authUnlock)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'authUnlock', args: req, reply: reply})
}

export const authLock = (
  req: AuthLockRequest,
  cb: (err: RPCError, resp: AuthLockResponse) => void
) => {
  const reply = 'Keys.authLock-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.authLock):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.authLock) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.authLock)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'authLock', args: req, reply: reply})
}

export const runtimeStatus = (
  req: RuntimeStatusRequest,
  cb: (err: RPCError, resp: RuntimeStatusResponse) => void
) => {
  const reply = 'Keys.runtimeStatus-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.runtimeStatus):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.runtimeStatus) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.runtimeStatus)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'runtimeStatus', args: req, reply: reply})
}

export const rand = (
  req: RandRequest,
  cb: (err: RPCError, resp: RandResponse) => void
) => {
  const reply = 'Keys.rand-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.rand):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.rand) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.rand)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'rand', args: req, reply: reply})
}

export const randPassword = (
  req: RandPasswordRequest,
  cb: (err: RPCError, resp: RandPasswordResponse) => void
) => {
  const reply = 'Keys.randPassword-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.randPassword):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.randPassword) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.randPassword)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'randPassword', args: req, reply: reply})
}

export const collections = (
  req: CollectionsRequest,
  cb: (err: RPCError, resp: CollectionsResponse) => void
) => {
  const reply = 'Keys.collections-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.collections):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.collections) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.collections)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'collections', args: req, reply: reply})
}

export const documents = (
  req: DocumentsRequest,
  cb: (err: RPCError, resp: DocumentsResponse) => void
) => {
  const reply = 'Keys.documents-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.documents):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.documents) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.documents)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'documents', args: req, reply: reply})
}

export const documentDelete = (
  req: DocumentDeleteRequest,
  cb: (err: RPCError, resp: DocumentDeleteResponse) => void
) => {
  const reply = 'Keys.documentDelete-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.documentDelete):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.documentDelete) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.documentDelete)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'documentDelete', args: req, reply: reply})
}

export const messagePrepare = (
  req: MessagePrepareRequest,
  cb: (err: RPCError, resp: MessagePrepareResponse) => void
) => {
  const reply = 'Keys.messagePrepare-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.messagePrepare):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.messagePrepare) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.messagePrepare)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'messagePrepare', args: req, reply: reply})
}

export const messageCreate = (
  req: MessageCreateRequest,
  cb: (err: RPCError, resp: MessageCreateResponse) => void
) => {
  const reply = 'Keys.messageCreate-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.messageCreate):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.messageCreate) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.messageCreate)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'messageCreate', args: req, reply: reply})
}

export const messages = (
  req: MessagesRequest,
  cb: (err: RPCError, resp: MessagesResponse) => void
) => {
  const reply = 'Keys.messages-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.messages):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.messages) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.messages)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'messages', args: req, reply: reply})
}

export const watch = (
  req: WatchRequest,
  cb: (err: RPCError, resp: WatchEvent) => void
) => {
  const reply = 'Keys.watch-' + replyID()
  ipcRenderer.on(reply, (event, arg) => {
    ipcRenderer.removeAllListeners(reply)
    if (arg.err) {
      console.error('RPC error (Keys.watch):', arg.err)
      errHandler(arg.err)
    } else {
      console.log('RPC (Keys.watch) done')
    }
    cb(arg.err, arg.resp)
  })
  console.log('RPC (Keys.watch)...')
  ipcRenderer.send('rpc', {service: 'Keys', method: 'watch', args: req, reply: reply})
}

